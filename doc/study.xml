<chapter id="study">
<title>Sample studies with MDT</title>

<sect1 id="introduction">
<title>Introduction</title>

<note><para>Should have plots of raw data histograms superposed on the
final restraints in all cases.</para></note>

<para>This Chapter describes the use of &MDT; for updating many of the
&MODELLER; restraint libraries, including stereochemical, non-bonded, and
homology-derived restraints:</para>

<orderedlist numeration="arabic">
  <listitem><para>Sterochemical restraints</para>
  <itemizedlist>
    <listitem><para>chemical bonds: <inlineequation><mathphrase>p(Bond | BondType)</mathphrase></inlineequation></para></listitem>
    <listitem><para>chemical angles: <inlineequation><mathphrase>p(Angle | AngleType)</mathphrase></inlineequation></para></listitem>
    <listitem><para>improper dihedral angles as defined in the CHARMM residue topology file: <inlineequation><mathphrase>p(Dihedral | DihedralType)</mathphrase></inlineequation></para></listitem>
    <listitem><para>the &omega; dihedral angle of the peptide bond: <inlineequation><mathphrase>p(&omega; | ResidueType<subscript>+1</subscript>)</mathphrase></inlineequation> where ResidueType<subscript>+1</subscript> refers to the residue type following the residue with the &omega; dihedral angle</para></listitem>
    <listitem><para>the &Phi; and &Psi; dihedral angles: <inlineequation><mathphrase>p(&Phi; | ResidueType)</mathphrase></inlineequation>, <inlineequation><mathphrase>p(&Psi; | ResidueType)</mathphrase></inlineequation></para></listitem>
    <listitem><para>the sidechain dihedral angles: <inlineequation><mathphrase>p(&chi;<subscript>1</subscript> | ResidueType)</mathphrase></inlineequation>, <inlineequation><mathphrase>p(&chi;<subscript>2</subscript> | ResidueType)</mathphrase></inlineequation>, <inlineequation><mathphrase>p(&chi;<subscript>3</subscript> | ResidueType)</mathphrase></inlineequation>, <inlineequation><mathphrase>p(&chi;<subscript>4</subscript> | ResidueType)</mathphrase></inlineequation></para></listitem>
    <listitem><para>the mainchain conformation: <inlineequation><mathphrase>p(&Phi;, &Psi; | ResidueType)</mathphrase></inlineequation></para></listitem>
  </itemizedlist>
  </listitem>

  <listitem><para>Non-bonded restraints:</para>
  <itemizedlist>
    <listitem><para>the mainchain hydrogen bonding restraints: <inlineequation><mathphrase>p(h | d, a)</mathphrase></inlineequation></para></listitem>
    <listitem><para>the non-bonded pair of atom triplets: <inlineequation><mathphrase>p(d, &alpha;<subscript>1</subscript>, &alpha;<subscript>2</subscript>, &theta;<subscript>1</subscript>, &theta;<subscript>2</subscript>, &theta;<subscript>3</subscript> | t<subscript>1</subscript>, t<subscript>2</subscript>)</mathphrase></inlineequation></para></listitem>
  </itemizedlist>
  </listitem>

  <listitem><para>Homology-derived restraints:</para>
  <itemizedlist>
    <listitem><para>distance: <inlineequation><mathphrase>p(d | d')</mathphrase></inlineequation></para></listitem>
  </itemizedlist>
  </listitem>

</orderedlist>

<para>
The following sections will outline the process of starting with the Protein
Data Bank (&PDB;) and ending up with the &MODELLER; restraint
library files. We will describe the rationale for the process, input data sets,
programs and scripts used, and even the analysis of the results. All of the
input files should be found in the &MDT; distribution, in the 
<filename>constr2005</filename> directory.
</para>

<para>
The overall approach is to construct appropriately accurate, smooth, and
transformed surfaces based on the statistics in &PDB; for use as spatial
restraints for model building. The restraints from the first iteration will be
used to construct many models, which in turn will be used to re-derive the
equivalent restraints from the models. These model-derived restraints will
then be compared against the original &PDB;-derived restraints to find
problems and get indications as to how to change the restraints so that
models are statistically as similar to &PDB; structures as possible.
</para>

</sect1>

<sect1 id="stereo">
<title>Stereochemical restraints</title>

<sect2 id="sample">
<title>The sample</title>

<para>
The starting point for deriving the restraints in this section consists of
9,365 chains that are representative of the 65,629 chains in the October 2005
version of &PDB;. The representative set was obtained by clustering all &PDB;
chains with &MODELLER;, such that the representative chains are from 30 to
3000 residues in length and are sharing less than 60% sequence identity to
each other (or are more than 30 residues different in length). This
is the corresponding &MODELLER; script:
</para>
<example id="make-pdb60">
<title>&MODELLER; &PDB;-clustering script,
<filename>constr2005/cluster-PDB/make-pdb60.py</filename></title>
<programlisting>
&make-pdb60;
</programlisting>
</example>

<para>
The actual chains for restraint derivation are in fact a subset of the 9,365
representative chains, corresponding to the 4,532 crystallographic structures
determined at least at 2 &Aring; resolution (the representative structure for
each group is the highest resolution x-ray structure in the group). This
decision was made by looking at the distribution of the
&chi;<subscript>1</subscript> dihedral angles as a function of resolution
(see <xref linkend="chi1" />) and the distribution of resolutions themselves
for all 9,365 representative chains, using this &MDT; script:
</para>
<example id="impact-resolution">
<title>Distribution of resolution,
<filename>constr2005/impact-of-resolution/make-mdt.py</filename></title>
<programlisting>
&impact-resolution;
</programlisting>
</example>

<para>This script creates a
<ulink url="&epydoc;Library">Library</ulink> object and then adds an X-ray
resolution feature. Values of this feature are placed into 20 bins of width 0.2,
starting at 0. It then creates a
<ulink url="&epydoc;Table">Table</ulink> object, which is the MDT table itself.
This starts off as an empty 1D table of the X-ray
resolution feature. It then uses a &MODELLER; alignment object to read the
sequences from <filename>pdb_60.pir</filename> one by one, and for each one it
updates the X-ray resolution feature in the MDT table by calling
<ulink url="&epydoc;Table.add_alignment">Table.add_alignment</ulink>. Finally,
the table is written out to the file <filename>mdt2.mdt</filename> using
<ulink url="&epydoc;Table.write">Table.write</ulink>.
</para>

<para>The resulting &MDT; table <filename>mdt2.mdt</filename> was then
plotted with the script:</para>
<example id="impact-resolution-asgl">
<title>Plot of distribution of resolution,
<filename>constr2005/impact-of-resolution/asgl.py</filename></title>
<programlisting>
&impact-resolution-asgl;
</programlisting>
</example>

<para>where the <ulink url="&epydoc;Table.write_asgl">Table.write_asgl</ulink>
method writes out an &ASGL; script and the MDT data in a form suitable for
plotting (which we then execute with &ASGL; using Python's
<command>os.system</command> method). This gives
<ulink url="pdf/impact-of-resolution.pdf">this output plot</ulink>.</para>

</sect2>

<sect2 id="chembonds">
<title>Chemical bonds</title>

<para>
The &MDT; table is constructed with the following &MDT; Python script:
</para>
<example id="bonds-make">
<title>Distribution of bond length against bond type,
<filename>constr2005/bonds/make-mdt.py</filename></title>
<programlisting>
&bonds-make;
</programlisting>
</example>

<para>
In this case, the bin file does not contain all of the necessary information,
and we must read the file <filename>bndgrp.lib</filename> which defines all
chemical bonds, using the
<ulink url="&epydoc;BondClasses.read">BondClasses.read</ulink> method. The
MDT we then construct is a 3D table of X-ray resolution, bond type, and bond
length. The contents of the &MDT; table are then plotted with &ASGL; as follows:
</para>
<example id="bonds-asgl">
<title>Plot of bond length distributions,
<filename>constr2005/bonds/asgl.py</filename></title>
<programlisting>
&bonds-asgl;
</programlisting>
</example>
<para>giving <ulink url="pdf/bonds.pdf">this output</ulink>. Notice that
here we use the <ulink url="&epydoc;Table.reshape">Table.reshape</ulink> method,
which can reshape a table by reordering the features, and/or reducing the bin
ranges (offset or shape) of these features. In this case we don't change the
feature order, or the offset (leaving it at the default 0,0,0) but we do
change the shape. The first feature is restricted to only one bin - because
our bin file for X-ray resolution contains only two bins (for "less than
2 &Aring;" and "2 &Aring; or greater") this keeps only the good structures
for our plot. The other two features have their bin ranges reduced by 1
(a negative value for shape means "reduce the size by this amount"),
which effectively removes the final ("undefined") bin.</para>

<para>
Inspection of the plots shows that all distributions are mono-modal, but most
are distinctly non-Gaussian. However, at this point, Gaussian restraints are
still favored because the ranges are very narrow and because the non-Gaussian
shape of the histograms may result from the application of all the other
restraints (this supposition will be tested by deriving the corresponding
distributions from the models, not &PDB; structures). Also, although many
distributions are quite symmetrical, not all of them are. Therefore, there is
the question of how best to fit a restraint to the data. There are at least
three possibilities, in principle: (i) calculating the average and standard
deviation from all (subset) of the data, (ii) least-squares fitting of the
Gaussian model to the data, and (iii) using cubic splines of the data. The
first option was adopted here: the mean and standard deviation will be the
parameters of the analytically defined bond restraint for &MODELLER;.
</para>

<para>
The final &MODELLER; &MDT; library is produced with:
</para>
<informalexample><programlisting>
&bonds-modlib;
</programlisting></informalexample>

<para>
Here we use the <ulink url="&epydoc;Table.integrate">Table.integrate</ulink>
method, which removes a feature from the table by integrating the remaining
features over all of that feature's bins, and the
<ulink url="&epydoc;write_bondlib">write_bondlib</ulink> function
to write out a &MODELLER; script which builds restraints using the &MDT;-derived
distributions.
</para>

</sect2>

<sect2 id="chemangles">
<title>Chemical angles</title>

<para>
As for the bonds above, the &MDT; table is constructed with the following
&MDT; Python script:
</para>
<informalexample><programlisting>
&angles-make;
</programlisting></informalexample>

<para>
The contents of the &MDT; table are then plotted with &ASGL; as follows:
</para>
<informalexample><programlisting>
&angles-asgl;
</programlisting></informalexample>
<para>giving <ulink url="pdf/angles.pdf">this output</ulink>.</para>

<para>
The situation is similar to that for the chemical bonds, except that there are
also four cases of bi-modal (as opposed to mono-modal) distributions:
Asp:CB:CG:OD2, Asp:OD2:CG,OD1, Pro:CB:CG:CD, and Pro:CD:N:CA angles. The Asp
bi-modal distribution may result from crystallographers mislabeling carboxyl
oxygens for the protonated state of the sidechain (which is interesting
because the corresponding angles might be used as a means to assign the
protonation state). The mean values for these angles were edited by hand.
Otherwise exactly the same considerations as for bonds apply here.
</para>

<para>
The final &MODELLER; &MDT; library is produced with:
</para>
<informalexample><programlisting>
&angles-modlib;
</programlisting></informalexample>

</sect2>

<sect2 id="impropers">
<title>Improper dihedral angles</title>

<para>
Exactly the same situation applies as for the chemical bonds.
The &MDT; table is constructed with the following &MDT; Python script:
</para>
<informalexample><programlisting>
&impropers-make;
</programlisting></informalexample>

<para>
The contents of the &MDT; table are then plotted with &ASGL; as follows:
</para>
<informalexample><programlisting>
&impropers-asgl;
</programlisting></informalexample><para>giving <ulink url="pdf/impropers.pdf">this output</ulink>.</para>

<para>
The final &MODELLER; &MDT; library is produced with:
</para>
<informalexample><programlisting>
&impropers-modlib;
</programlisting></informalexample>

</sect2>

<sect2 id="chi1">
<title>Sidechain dihedral angle &chi;<subscript>1</subscript></title>

<para>
The first question asked was "What is the impact of resolution on the
distributions of residue &chi;<subscript>1</subscript>?". The answer was
obtained by constructing and inspecting
<inlineequation><mathphrase>p(&chi;<subscript>1</subscript> | R, resolution)</mathphrase></inlineequation> with:
</para>
<informalexample><programlisting>
&chi1res-make;
</programlisting></informalexample>
<para>and</para>
<informalexample><programlisting>
&chi1res-asgl;
</programlisting></informalexample>
<para>giving <ulink url="pdf/chi1-impact.pdf">this output</ulink>
which clearly shows that X-ray structures at resolution of at least 2.0 &Aring;
are just fine. X-ray structures above that resolution and NMR structures
(whose resolution is set artificially to 0.45 &Aring; for the purposes of &MDT;
tabulation) do not appear to be suitable for deriving restraints for modeling,
as the peaks are significantly wider and there is a significant population
at ~120&deg;. Also, the peaks appear Gaussian. Thus, a weighted sum of three
Gaussians (except for Pro, which has two) was judged to be an appropriate
model for these data. Again, the following script was used to construct the
&MDT; table:
</para>
<informalexample><programlisting>
&chi1-make;
</programlisting></informalexample>
<para>and the contents then plotted with &ASGL; as follows:</para>
<informalexample><programlisting>
&chi1-asgl;
</programlisting></informalexample>
<para>giving <ulink url="pdf/chi1.pdf">this output</ulink>.</para>

<para>
The weights, means, and standard deviations of the Gaussians were obtained
by least-squares fitting with &ASGL; (with the script below) and are manually
added to the &MODELLER; &MDT; library.
</para>
<informalexample><programlisting>
&chi1-fit;
</programlisting></informalexample>

</sect2>

<sect2 id="chi2">
<title>Sidechain dihedral angle &chi;<subscript>2</subscript></title>

<para>
The situation is very similar to that for &chi;<subscript>1</subscript>,
except that the shapes of histograms are not Gaussian in most cases.
Therefore, 1D cubic splines are used to represent the restraints.
</para>

<para>
The &MDT; table is constructed with the following &MDT; Python script:
</para>
<informalexample><programlisting>
&chi2-make;
</programlisting></informalexample>

<para>
The contents of the &MDT; table are then plotted with &ASGL; as follows:
</para>
<informalexample><programlisting>
&chi2-asgl;
</programlisting></informalexample>
<para>giving <ulink url="pdf/chi2.pdf">this output</ulink>.</para>

<para>
The final &MODELLER; &MDT; library is produced with:
</para>
<informalexample><programlisting>
&chi2-modlib;
</programlisting></informalexample>

<para>
This script also uses
<ulink url="&epydoc;Table.smooth">Table.smooth</ulink> to smooth the raw
frequencies and
<ulink url="&epydoc;Table.normalize">Table.normalize</ulink> to convert the
distribution into a PDF. It is then converted into a statistical potential
by taking the negative log of the values (using the
<ulink url="&epydoc;Table.log_transform">Table.log_transform</ulink>,
<ulink url="&epydoc;Table.linear_transform">Table.linear_transform</ulink>, and
<ulink url="&epydoc;Table.offset_min">Table.offset_min</ulink> methods).
The smoothing parameter <varname>weight</varname> of
<replaceable>10</replaceable> was selected by trial and error, inspecting the
resulting restraints in <filename>modlib-a.ps</filename>, also produced by the
script above.
</para>

</sect2>

<sect2 id="chi3">
<title>Sidechain dihedral angle &chi;<subscript>3</subscript></title>

<para>
Exactly the same considerations apply as to &chi;<subscript>2</subscript>.
The &MDT; table is constructed with the following &MDT; Python script:
</para>
<informalexample><programlisting>
&chi3-make;
</programlisting></informalexample>

<para>
The contents of the &MDT; table are then plotted with &ASGL; as follows:
</para>
<informalexample><programlisting>
&chi3-asgl;
</programlisting></informalexample>
<para>giving <ulink url="pdf/chi3.pdf">this output</ulink>.
The final &MODELLER; &MDT; library is produced with:
</para>
<informalexample><programlisting>
&chi3-modlib;
</programlisting></informalexample>

<para>
The resulting restraints are plotted in <filename>modlib-a.ps</filename>,
also produced by the script above.
</para>

</sect2>

<sect2 id="chi4">
<title>Sidechain dihedral angle &chi;<subscript>4</subscript></title>

<para>
Exactly the same considerations apply as to &chi;<subscript>2</subscript>
and &chi;<subscript>3</subscript>. The &MDT; table is constructed with the
following &MDT; Python script:
</para>
<informalexample><programlisting>
&chi4-make;
</programlisting></informalexample>

<para>
The contents of the &MDT; table are then plotted with &ASGL; as follows:
</para>
<informalexample><programlisting>
&chi4-asgl;
</programlisting></informalexample>
<para>giving <ulink url="pdf/chi4.pdf">this output</ulink>.
The final &MODELLER; &MDT; library is produced with:
</para>
<informalexample><programlisting>
&chi4-modlib;
</programlisting></informalexample>

<para>
The resulting restraints are plotted in <filename>modlib-a.ps</filename>,
also produced by the script above.
</para>

</sect2>

<sect2 id="phi">
<title>Mainchain dihedral angle &Phi;</title>

<para>
Exactly the same considerations apply as to &chi;<subscript>2</subscript>,
&chi;<subscript>3</subscript>, and &chi;<subscript>4</subscript>. The &MDT;
table is constructed with the following &MDT; Python script:
</para>
<informalexample><programlisting>
&phi-make;
</programlisting></informalexample>

<para>
The contents of the &MDT; table are then plotted with &ASGL; as follows:
</para>
<informalexample><programlisting>
&phi-asgl;
</programlisting></informalexample>
<para>giving <ulink url="pdf/phi.pdf">this output</ulink>.
The final &MODELLER; &MDT; library is produced with:
</para>
<informalexample><programlisting>
&phi-modlib;
</programlisting></informalexample>

<para>
The resulting restraints are plotted in <filename>modlib-a.ps</filename>,
also produced by the script above.
</para>

</sect2>

<sect2 id="psi">
<title>Mainchain dihedral angle &Psi;</title>

<para>
Exactly the same considerations apply as to &chi;<subscript>2</subscript>,
&chi;<subscript>3</subscript>, &chi;<subscript>4</subscript>, and &Phi;.
The &MDT; table is constructed with the following &MDT; Python script:
</para>
<informalexample><programlisting>
&psi-make;
</programlisting></informalexample>

<para>
The contents of the &MDT; table are then plotted with &ASGL; as follows:
</para>
<informalexample><programlisting>
&psi-asgl;
</programlisting></informalexample>
<para>giving <ulink url="pdf/psi.pdf">this output</ulink>.
The final &MODELLER; &MDT; library is produced with:
</para>
<informalexample><programlisting>
&psi-modlib;
</programlisting></informalexample>

<para>
The resulting restraints are plotted in <filename>modlib-a.ps</filename>,
also produced by the script above.
</para>

</sect2>

<sect2 id="omega">
<title>Mainchain dihedral angle &omega;</title>

<para>
This dihedral angle is a little different from all others explored thus far
because it depends more strongly on the type of the subsequent residue than
the type of the residue whose dihedral angle is studied; that is, the &omega;
of the residue preceding Pro, not the Pro &omega;, is impacted by the Pro
residue. These dependencies are explored with &MDT; tables in directory
<filename>constr2005/omega/run1/</filename>. The bottom line is that we need
to use the &MDT; residue type feature 28, which refers to the type of the
residue that is <varname>deltai</varname> away from the residue with the
dihedral angle &omega;.
</para>

<para>
The next step is to obtain the <inlineequation><mathphrase>p(&omega; | R<subscript>+1</subscript>)</mathphrase></inlineequation>
distributions with finer sampling of 0.5&deg;:
</para>
<informalexample><programlisting>
&omega-make;
</programlisting></informalexample>

<para>
The <ulink url="pdf/omega.pdf">distribution in raw
form</ulink> is then plotted with:
</para>
<informalexample><programlisting>
&omega-asgl;
</programlisting></informalexample>
<para>
and <ulink url="pdf/omega-log.pdf">in logarithmic form</ulink>
with:
</para>
<informalexample><programlisting>
&omega-asgl-log;
</programlisting></informalexample>

<para>
Clearly, the peaks are sharp and will best be modeled by Gaussian distributions.
</para>

<para>
Similarly to &chi;<subscript>1</subscript>, two Gaussian distributions are
fit to the histograms with the following &ASGL; script:
</para>
<informalexample><programlisting>
&omega-fit;
</programlisting></informalexample>

<para>
The means and standard deviations for each residue type are extracted from
<filename>fit.log</filename> by the &ASGL; <filename>get_prms.F</filename>
program, but they are only used to guess the means of 179.8&deg; and 0&deg;
and standard deviations of 1.5&deg; and 1.5&deg; for the two peaks,
respectively. The distribution of &omega; dihedral angles in the models
calculated with these &omega; restraints will be checked carefully and the
restraint parameters will be adapted as needed.  
</para>

<para>
The weights of the peaks are not determined reliably by least-squares fitting
in this case because the second weight is very close to 0 (in principle, they
can even be less than zero). Therefore, they are determined separately by
establishing
<inlineequation><mathphrase>
p(c<subscript>&omega;</subscript> | R<subscript>+1</subscript>)
</mathphrase></inlineequation>,
where c<subscript>&omega;</subscript> is the class of the
&omega; dihedral angle (1 or 2, <emphasis>trans</emphasis> or
<emphasis>cis</emphasis>).
</para>

<para>
The &MDT; table is constructed with the following &MDT; Python script:
</para>
<informalexample><programlisting>
&omega-weights-make;
</programlisting></informalexample>

<para>
The contents of the &MDT; table are then plotted with &ASGL; as follows:
</para>
<informalexample><programlisting>
&omega-weights-asgl;
</programlisting></informalexample>
<para>giving <ulink url="pdf/omega-weights.pdf">this output</ulink>.</para>

<para>
The library <filename>omega.py</filename> is edited manually to replace the
means and standard deviations with <literal>179.8  0.0   2.3  2.3</literal>.
</para>

</sect2>

<sect2 id="phipsi">
<title>Mainchain dihedral angles &Phi; and &Psi;</title>

<para>
The initial runs in <filename>run1</filename> explored Ramachandran maps
extracted from different representative sets of structures (e.g., clustered by
40% sequence identity) and stratification by the crystallographic residue
B<subscript>iso</subscript> as well as resolution and residue type. We ended
up with the sample and stratification described above.
</para>

<para>
The 2D histograms <inlineequation><mathphrase>p(&Phi;, &Psi; | R)</mathphrase></inlineequation> are derived with:
</para>
<informalexample><programlisting>
&phipsi-make;
</programlisting></informalexample>

<para>
They are plotted with
</para>
<informalexample><programlisting>
&phipsi-asgl;
</programlisting></informalexample>
<para>giving <ulink url="pdf/phipsi.pdf">this output</ulink>.</para>

<para>
The distributions are clearly not 2D Gaussian functions and need to be
approximated by 2D cubic splines. Exploring and visualizing various smoothing
options results in the following file to produce the final &MODELLER; &MDT;
library:
</para>
<informalexample><programlisting>
&phipsi-modlib;
</programlisting></informalexample>

<para>
The raw, smooth, and transformed surfaces are visualized and compared best
with Mathematica.
</para>

</sect2>

</sect1>

<sect1 id="nonbonded">
<title>Non-bonded restraints</title>

<para>
A general pairwise distance- and atom-type dependent statistical potential
for all atom type pairs has been derived by Min-yi Shen (DOPE). Here, we focus
on specialized pairwise non-bonded restraints.
</para>

<sect2 id="hbond">
<title>Mainchain hydrogen bonding restraints</title>

<para>
The idea is to describe them as restraints on the donor and acceptor pairs of
atom triplets. The donor triplet could be N<subscript>i</subscript> -
CA<subscript>i</subscript> - C<subscript>i-1</subscript> and the acceptor
triplet could be O<subscript>j</subscript> - C<subscript>j</subscript> -
CA<subscript>j</subscript>, where i and j are residue indices.
</para>

<para>
As always, here are the aspects that need to be explored and defined:
</para>

<variablelist>
<varlistentry>
<term>Which dependent features to use?</term>
<listitem>
<para>
The dependent features are clearly the distance, two angles, and three
dihedral angles of the two triplets of atoms (the donor and acceptor
triplets), though I hope that some of them can be omitted without too much
of a problem.
</para>

<para>
We could have the total potential as a sum of terms for each one of the
dependent features, but then the correlations between them would be lost.
We need to find out which features are most correlated and join those in the
higher order restraints.
</para>

<para>
Physically, how does the definition of the H atom position on the donor
'eliminate' the need to consider the two atoms connected to the the donor N
(and thus reduce the number of dependent features)?
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Which independent features to use?</term>
<listitem>
<para>
The independent features can be divided into those that the dependent
features 'really' depend on and those that are there for quality control
(e.g., resolution). The independent features include the triplet types
(donor and acceptor, irrespective of the residue type), sequence separation,
and X-ray structure resolution. It seems best to fix the triplet types to DON
and ACC respectively and let the sequence separation span the negative and
positive range. This way, the triplet types could even be omitted from the MDT
table (they don't change), just like the resolution (though I don't like the
former omission).
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>What is the range and binning of these features?</term>
<listitem>
<para>
The first (4.5 &Aring;) and second atom shell (8 &Aring;) are important
numbers for considering the range of the dependent distance. In addition, the
standard range of H-bonds is 3.5 &Aring;.
</para>

<para>
It is conceivable that looking only at the raw distributions for deciding
about the dependent and independent features, their bins, and ranges would
be misleading. For example, normalization of the raw frequency with that
expected by chance might eliminate a large number of differences caused by
such features as sequence separation. Thus, it may be possible to use
coarser binning in some independent features.
</para>

<para>
The previous point indicates the need to develop smoothing and normalization
early on, so that 'final' restraints and not raw frequencies are used in
judging the selection of features, binning, and range. One should be helped
by conditional entropies and Mathematica in this endeavor.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>How to smooth the raw frequencies?</term>
<listitem>
<para>
By adding a uniform distribution with an appropriate weight.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>How to normalize the raw frequencies?</term>
<listitem>
<para>
The problem is that both the 'analytical' and 'empirical' routes are very
difficult: (i) duplicating the 4 &pi; r<superscript>2</superscript>
argument here would require considering volume elements spanned by distance,
dihedral angles, and angles, which is difficult; (ii) it is difficult to
imagine what pairs of atom triplets in real structures would provide
a good reference. Min-yi probably came to the rescue with an idea to simulate
pairs of triplets inside a sphere of say 23 &Aring; radius. Pairs of triplets
are placed randomly inside the sphere, no atom-overlap checks are performed,
and then the distribution of the relative orientations is collected. But
there is still a problem with this idea: Because the reference does not
depend on sequence separation, the reference will not 'normalize' out the
impact of sequence separation in the raw frequencies, which does not
'feel' right.
</para>

<para>
Here is the beginning of a larger idea, based on playing games with a system
we define, so we know what it is. It is also based on an idea of progression,
evolving the system from a simple version where everything is clear to a more
complex and more realistic system in a series of steps that are hopefully
managable. And it is already clear up front that the idea will be fighting
both the thermodynamic assumption for deriving the statistical potentials
and the multi-body problem (because the idea is principled and because these
are the two main issues in extracting restraints from a sample of structures).
</para>

<para>
So the starting toy system is a polypeptide chain that 'feels' energy terms
for only chemical bonds, angles, and dihedral angles, each one of which
depends on the atom types and the residue type. There are no other
interactions, not even non-bonded interactions. The chain looks like a
random walk (but of course it is not). By definition, the '&PDB;' (i.e., the
sample) contains native structures at the global energy minimum, each one of
which is entirely self-consistent with each other (i.e., there is no
frustration among the restraints). Clearly, the sample will show that the
distributions of the bonds, angles, and dihedral angles are delta functions.
Therefore, we can in a straighforward way determine the means of all
restraints, but there is no 'entropy' in the resulting restraints and/or it
is not knowable from the sample. Nevertheless, the corresponding pdf's (i.e.,
delta functions) would allow us to exactly predict the native
structure of any new sequence.
</para>

<para>
But wait a second, we just may have tacitly skipped the 'normalization' step
because the final answer was so obvious. Should we in fact formally normalize
the delta functions by a distribution of bonds, angles, and dihedral angles
for a random collection of points (of course, we would get the same delta
functions back)? Why a random collection? Because it seems that the reference
distribution should be based on all energy terms but those we are trying to
extract from the sample. To make these steps clearer, let's consider them only
at the 2nd level of buildup, next. But we should come back here and define
exactly the properties of the random collection (e.g., What is random?
Uniformly distributed in Cartesian coordinates? What is volume shape and size?
These will impact on the distance distribution, though not on the angle
and dihedral angle distributions if the volume is large enough.).
</para>

<para>
Is this progression very similar to Min-yi's DOPE manuscript, except that
partitioning is a little different (there, it is from single-body to two-body)?
</para>

<para>
Now comes the step to the 2nd level of the buildup. Let's say that the real
chains also feel the non-bonded Lennard-Jones terms between all atoms
separated by more than 3 chemical bonds, in addition to the bond, angle, and
dihedral angle terms. The systems is now frustrated and determining the
Lennard-Jones terms is not easy (if we had hard spheres, then we could just
look for the closest distance in a large sample and be done). Why do I feel
that -k<subscript>B</subscript> T times the natural logarithm of the ratio
between the &PDB; sample distribution of non-bonded distances and the
non-bonded distribution from the sample in the first step is a good
approximation to the Lennard-Jones energy (not even PMF, but real potential
energy)?
</para>

<para>
In the end, the order of the steps seems important for the final result,
while physically it should not be. Should we iterate or explore multiple
paths for a self-consistent solution? It seems estimating the more determining
terms (smaller entropy on their own) first makes sense.
</para>

<para>
Do it for homology-derived restraints, which are not physical, but the
statistical framework above should still apply. They are strong restraints,
so they should probably be considered early in the progression, right after
the stereochemistry.
</para>

<orderedlist numeration="arabic">
<listitem><para>
For an ideal system in which all variables are independent
(uncoupled), each variable will be found in its minimum/equilibrium
position. No information about force constants will be revealed.
</para></listitem>

<listitem><para>
Introducing an distance restraint into a protein chain will
inevitably include a variable coupled to the existing internal
coordinates into the minimization, i.e. the restraint "bond length" is
not an independent variable.
</para></listitem>

<listitem><para>
The addition of the restraints will expose the force constants for
each existing restraint.
</para></listitem>
</orderedlist>

<para>
Then some comments on your writeup, which is very cool! I like the specific
example of the simplest possible example of a "frustrating" restraint (i.e.,
the restraint on l), with equations. Did you try Mathematica to find the
solution of the system of three equations? I am sure they can be solved
numerically at the very least. There are probably no insights in the specific
solution, which must depend, qualitatively even,  on the values of the means
and force constants, but who knows. Also, one could write other systems of
three equations by picking say distance l, not theta, as the variable to
minimize. I wonder if that would give us any advantage?
</para>

<itemizedlist>
<listitem><para>
I certainly agree completely with your 3 points below. it is interesting that
this "gedanken" experiment addresses both the multiple body problem as well as
the concern that PDB is not a boltzmann ensemble. this leads me to believe
that we are doing something fundamentally correct.
</para></listitem>

<listitem><para>
It seems you can improve the description of the reference state and
normalization in the dope paper, based on the discussion we have here. Again,
I think it would be best to keep the motivation/rationale/execution of
normalization as statistical as possible, as opposed to physical. Or at least
do so at the beginning, and then make the physical connection in the end, if
you must, just like you did overall. On the other hand, our discussion here
is physical, not statistical, so i am not sure about the comment i just made.
</para></listitem>

<listitem><para>
Still for the DOPE paper, specifically: why did we select the reference
state for DOPE the way we did (which interactions are on/off ...).
</para></listitem>

<listitem><para>
I wonder if going from 3 to 4 points would again fundamentally change the
situation in 3D (as it did when we went from 2 to 3 points), since we would
for the first time introduce chirality. it probably does not matter in ways
relevant to us here.
</para></listitem>

<listitem><para>
So now to assumptions/approximations/new questions (for you ;-) ): I suppose
we won't be able to solve the problem exactly (actually, it would be very
good to exactly define the problem we are addressing: How do we extract the
most accurate means and force constants from a sample of native states in
our "toy" universe?). So we need to start thinking about suitable
assumptions/approximations. what follows uses language so unprecise it is
irresponsible to use it. but what can i do! ;-)
</para></listitem>

<listitem><para>
It may be possible to come up with reasonable approximations if we assume
that the force constants for the added "frustrating" restraints
(e.g., k<subscript>l</subscript>) are very weak compared to the other
restraints (e.g., bonds, angles, dihedrals).
</para></listitem>

<listitem><para>
So maybe in our gedanken experiment we can add increasingly weaker restraints
and extract them from the native states and reference states corresponding
to global minima from the previous step (what we had on the whiteboard in
my office). in addition, maybe a "mean field" solution is the best we can
do; ie, after all unsolvable minimum-defining equations end up pushing
the means and force constants in all directions, we end up with some kind
of a gaussian distribution for them and maybe we CAN estimate the mean
and standard deviation of that gaussian, although we cannot get the
individual values in it.
</para></listitem>

<listitem><para>
So I'd like to ask you here again how come people use E = -kT
ln p(native) / p(reference) ; what exactly is the native, reference, E for
which this equation allows one to calculate E. what is the origin of this
equation, approximations, ...?
</para></listitem>

<listitem><para>
It still seems good to derive the expression equivalent to E = -kT
ln p(native) / p(reference) explicitly for your simple 3 body system. Let's
push that one to its complete/clear/explicit solution to improve our
understanding in general. But you will need to make it more complicated by
introducing a few different types of points, you need to imagine a &PDB;
native triangle structures for lots of triangles consisting of the minimal
number of types of vertices (just enough to make it useful here). Then,
how do we get all the means and force constants?
</para></listitem>
</itemizedlist>

</listitem>
</varlistentry>

<varlistentry>
<term>Overall considerations</term>
<listitem>
<para>
There is a picture that a short-range, residue type-independent H-bonding
potential will be useful for restraining the specific local geometry and
not for selecting the fold directly. A longer range orientation-dependent
two-body term could be helpful in discriminating between different folds.
</para>

<para>
Presumably, the final restraints will not have a relatively small number of
simple (Gaussian) peaks, thus the new XOR restraint is probably not
indicated here.
</para>

<para>
Develop some knowledge about the problem by doing lots of 1D histograms for the
individual features in your sample, both dependent and independent ones.
</para>
</listitem>
</varlistentry>

</variablelist>

</sect2>

<sect2 id="odnonbond">
<title>Orientation-dependent pairwise non-bonded restraints</title>
</sect2>

</sect1>

<sect1 id="homology">
<title>Homology-derived restraints</title>
</sect1>

</chapter>
